{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction The ComputerGui class is a custom-made unit extension that adds an interactable screen (through mouse input) with window management logic to a select object inside an unit's .model file. It is designed to be highly customizable through Lua configuration, allowing you to make your own 2D object classes to later reuse in many different windows. Installation Download the extension files and extract it to your map's root folder. Add the following XML to your main.xml file, outside the <level> tag: <AddFiles directory=\"assets\"> <!-- ComputerGui: window corners (can't rotate vanilla texture or else they escape monitor, Diesel limitation) --> <dds path=\"guis/textures/pd2/hud_corner_down_left\"/> <dds path=\"guis/textures/pd2/hud_corner_down_right\"/> <dds path=\"guis/textures/pd2/hud_corner_top_right\"/> </AddFiles> <Hooks directory=\"hooks\"> <!-- ComputerGui --> <hook file=\"UnitNetworkHandler.lua\" source_file=\"lib/network/handlers/unitnetworkhandler\"/> <hook file=\"FPCameraPlayerBase.lua\" source_file=\"lib/units/cameras/fpcameraplayerbase\"/> </Hooks> <Elements directory=\"elements\"> <!-- ComputerGui --> <element name=\"ComputerSetValue\"/> <element name=\"ComputerValueFilter\"/> </Elements> Add the following XML to your main.xml file, inside the <level> tag: <classes directory=\"classes\"> <class file=\"ComputerGui/ComputerGui.lua\"/> </classes> You're now all set to use the extension. Unit setup See this page for reference on .unit files. For this extension, the bare minimum that needs to be included in your .unit file's extensions is: <extension name=\"damage\" class=\"UnitDamage\"/> <extension name=\"computer_gui\" class=\"ComputerGui\"> <var name=\"gui_object\" value=\"timer_gui\"/> <var name=\"camera_object\" value=\"camera_object_name\"/> <var name=\"tweak_data\" value=\"tweak_data_name\"/> </extension> UnitDamage : A base game extension which is required for sequence managers. gui_object : Where the graphical interface will be created and displayed. This is the name of an object inside the model, which should be a plane (curved surfaces not tested, but would probably not work). camera_object : An empty where the camera will be locked when entering the interaction state. tweak_data : The tweak_data.computer_gui entry containing your workspace and application definitions. More information on this on the next section. To actually start-up the screen, you'll also need some sort of interaction extension in your unit. You can find plenty of them in the base game. By default, they look for the interact sequence in your unit's sequence manager . This sequence should include a reference to the extension's start method: <sequence editable_state=\"false\" name=\"'interact'\" triggable=\"false\"> <function extension=\"'computer_gui'\" function=\"'start'\"/> </sequence> Tweak data configuration Each map project you create needs its own tweak data definition in order to avoid conflicts with other maps making use of this extension. ComputerGui.TWEAK_DATA_FILE indicates the file inside your map where you edit the tweak table; you can change the path however you prefer. The extension will load this file with dofile() on initialization. An empty configuration file, with no applications or workspaces defined, will resemble the following: local MODULE_DIRECTORY = BeardLib.current_level._mod.ModPath .. \"classes/ComputerGui/modules/\" local REQUIRED_MODULES = { \"base/ComputerObjectBase.lua\", \"base/ComputerWindow.lua\", \"base/ComputerBitmap.lua\", \"base/ComputerText.lua\", \"base/ComputerRect.lua\" } local modules = {} for _, module in pairs(REQUIRED_MODULES) do dofile(MODULE_DIRECTORY .. module) end for _, module in pairs(modules) do dofile(MODULE_DIRECTORY .. module) end tweak_data.computer_gui = {} MODULE_DIRECTORY : The directory inside your map where module files are to be loaded from. REQUIRED_MODULES : Absolute dependencies ComputerGui needs in order to work. modules : A table containing module files, inside which, you define classes based on ComputerObjectBase . ComputerGui comes with some extra modules as example material; feel free to modify them. dofile(BeardLib... : Module loader, which first loads ComputerObjectBase (required) and then any other modules specified in modules . tweak_data.computer_gui : Tweak data table the extension will refer to when loading your configuration. A very basic GUI definition, with no events, which adds a single application which, when opened, pops-up an \"Access Denied\" window: tweak_data.computer_gui = { example = { workspace = { background_texture = \"guis/textures/computergui/backgrounds/example\", }, applications = { { name = \"computer_gui_app_example\", icon = \"guis/textures/computergui/backgrounds/application_icon_example\", window = { config = { halign = \"grow\", valign = \"grow\", w = 340, h = 84 }, background_color = Color.black, children = { ComputerBitmap:new({ config = { name = \"icon\", texture = \"guis/textures/pd2/feature_crimenet_heat\", w = 64, h = 64, x = 10, y = 10 }, events = {} }), ComputerText:new({ config = { name = \"text\", text = \"Access denied.\", font = \"fonts/font_medium_noshadow_mf\", render_template = \"Text\", font_size = 40, color = Color.white, x = 85, vertical = \"center\" }, events = {} }) } } } } } } See ComputerObjectBase for a detailed rundown on how to write tweak data for modules. If you plan on reusing the same panel for multiple applications, it is recommended to create a \"preset\" table for its configuration and then use the game's deep_clone(table) global method to use it to define the window value. Workspace values workspace = { background_texture = \"guis/textures/computergui/backgrounds/example\", start_post_event = { sound_event_id = \"highlight\", clbk = \"clbk_highlight_sound_end\", flags = { \"end_of_event\" } } } background_texture : The texture to use for the background of the entire interface. start_post_event : An event to play when the interface starts up. Refer to Events/Playing Sounds Bolded values are required and will cause a crash if missing. Application values applications = { { name = \"app_name\", icon = \"path/to/icon/texture\", window = {...} }, { name = \"app_two_name\", icon = \"path/to/icon/texture_two\", window = {...} } } applications : An array containing applications. For each item: name : The localized name of the application which will be written alongside its desktop icon. icon : The texture to use for the icon of the application. window : Tweak data for creating a ComputerWindow object which will be displayed when the player clicks on the application icon. Bolded values are required and will cause a crash if missing. Note on using textures Base game textures load as you use them. For custom textures, you will need to add an AddFiles module to your main.xml file.","title":"Home"},{"location":"#introduction","text":"The ComputerGui class is a custom-made unit extension that adds an interactable screen (through mouse input) with window management logic to a select object inside an unit's .model file. It is designed to be highly customizable through Lua configuration, allowing you to make your own 2D object classes to later reuse in many different windows.","title":"Introduction"},{"location":"#installation","text":"Download the extension files and extract it to your map's root folder. Add the following XML to your main.xml file, outside the <level> tag: <AddFiles directory=\"assets\"> <!-- ComputerGui: window corners (can't rotate vanilla texture or else they escape monitor, Diesel limitation) --> <dds path=\"guis/textures/pd2/hud_corner_down_left\"/> <dds path=\"guis/textures/pd2/hud_corner_down_right\"/> <dds path=\"guis/textures/pd2/hud_corner_top_right\"/> </AddFiles> <Hooks directory=\"hooks\"> <!-- ComputerGui --> <hook file=\"UnitNetworkHandler.lua\" source_file=\"lib/network/handlers/unitnetworkhandler\"/> <hook file=\"FPCameraPlayerBase.lua\" source_file=\"lib/units/cameras/fpcameraplayerbase\"/> </Hooks> <Elements directory=\"elements\"> <!-- ComputerGui --> <element name=\"ComputerSetValue\"/> <element name=\"ComputerValueFilter\"/> </Elements> Add the following XML to your main.xml file, inside the <level> tag: <classes directory=\"classes\"> <class file=\"ComputerGui/ComputerGui.lua\"/> </classes> You're now all set to use the extension.","title":"Installation"},{"location":"#unit-setup","text":"See this page for reference on .unit files. For this extension, the bare minimum that needs to be included in your .unit file's extensions is: <extension name=\"damage\" class=\"UnitDamage\"/> <extension name=\"computer_gui\" class=\"ComputerGui\"> <var name=\"gui_object\" value=\"timer_gui\"/> <var name=\"camera_object\" value=\"camera_object_name\"/> <var name=\"tweak_data\" value=\"tweak_data_name\"/> </extension> UnitDamage : A base game extension which is required for sequence managers. gui_object : Where the graphical interface will be created and displayed. This is the name of an object inside the model, which should be a plane (curved surfaces not tested, but would probably not work). camera_object : An empty where the camera will be locked when entering the interaction state. tweak_data : The tweak_data.computer_gui entry containing your workspace and application definitions. More information on this on the next section. To actually start-up the screen, you'll also need some sort of interaction extension in your unit. You can find plenty of them in the base game. By default, they look for the interact sequence in your unit's sequence manager . This sequence should include a reference to the extension's start method: <sequence editable_state=\"false\" name=\"'interact'\" triggable=\"false\"> <function extension=\"'computer_gui'\" function=\"'start'\"/> </sequence>","title":"Unit setup"},{"location":"#tweak-data-configuration","text":"Each map project you create needs its own tweak data definition in order to avoid conflicts with other maps making use of this extension. ComputerGui.TWEAK_DATA_FILE indicates the file inside your map where you edit the tweak table; you can change the path however you prefer. The extension will load this file with dofile() on initialization. An empty configuration file, with no applications or workspaces defined, will resemble the following: local MODULE_DIRECTORY = BeardLib.current_level._mod.ModPath .. \"classes/ComputerGui/modules/\" local REQUIRED_MODULES = { \"base/ComputerObjectBase.lua\", \"base/ComputerWindow.lua\", \"base/ComputerBitmap.lua\", \"base/ComputerText.lua\", \"base/ComputerRect.lua\" } local modules = {} for _, module in pairs(REQUIRED_MODULES) do dofile(MODULE_DIRECTORY .. module) end for _, module in pairs(modules) do dofile(MODULE_DIRECTORY .. module) end tweak_data.computer_gui = {} MODULE_DIRECTORY : The directory inside your map where module files are to be loaded from. REQUIRED_MODULES : Absolute dependencies ComputerGui needs in order to work. modules : A table containing module files, inside which, you define classes based on ComputerObjectBase . ComputerGui comes with some extra modules as example material; feel free to modify them. dofile(BeardLib... : Module loader, which first loads ComputerObjectBase (required) and then any other modules specified in modules . tweak_data.computer_gui : Tweak data table the extension will refer to when loading your configuration. A very basic GUI definition, with no events, which adds a single application which, when opened, pops-up an \"Access Denied\" window: tweak_data.computer_gui = { example = { workspace = { background_texture = \"guis/textures/computergui/backgrounds/example\", }, applications = { { name = \"computer_gui_app_example\", icon = \"guis/textures/computergui/backgrounds/application_icon_example\", window = { config = { halign = \"grow\", valign = \"grow\", w = 340, h = 84 }, background_color = Color.black, children = { ComputerBitmap:new({ config = { name = \"icon\", texture = \"guis/textures/pd2/feature_crimenet_heat\", w = 64, h = 64, x = 10, y = 10 }, events = {} }), ComputerText:new({ config = { name = \"text\", text = \"Access denied.\", font = \"fonts/font_medium_noshadow_mf\", render_template = \"Text\", font_size = 40, color = Color.white, x = 85, vertical = \"center\" }, events = {} }) } } } } } } See ComputerObjectBase for a detailed rundown on how to write tweak data for modules. If you plan on reusing the same panel for multiple applications, it is recommended to create a \"preset\" table for its configuration and then use the game's deep_clone(table) global method to use it to define the window value.","title":"Tweak data configuration"},{"location":"#workspace-values","text":"workspace = { background_texture = \"guis/textures/computergui/backgrounds/example\", start_post_event = { sound_event_id = \"highlight\", clbk = \"clbk_highlight_sound_end\", flags = { \"end_of_event\" } } } background_texture : The texture to use for the background of the entire interface. start_post_event : An event to play when the interface starts up. Refer to Events/Playing Sounds Bolded values are required and will cause a crash if missing.","title":"Workspace values"},{"location":"#application-values","text":"applications = { { name = \"app_name\", icon = \"path/to/icon/texture\", window = {...} }, { name = \"app_two_name\", icon = \"path/to/icon/texture_two\", window = {...} } } applications : An array containing applications. For each item: name : The localized name of the application which will be written alongside its desktop icon. icon : The texture to use for the icon of the application. window : Tweak data for creating a ComputerWindow object which will be displayed when the player clicks on the application icon. Bolded values are required and will cause a crash if missing.","title":"Application values"},{"location":"#note-on-using-textures","text":"Base game textures load as you use them. For custom textures, you will need to add an AddFiles module to your main.xml file.","title":"Note on using textures"},{"location":"elements/","text":"Elements ComputerGui comes packed with two custom elements to use in your mission logic. ComputerSetValue Sets the value to a certain key inside an unit's ComputerGui extension. Unit: the unit with the extension. Key: the key for the value. Value: the string value to set the key to. Combine the use of this element with custom modules to make your interface change as the mission progresses. ComputerValueFilter Filters on-executed element list execution based on the equivalence of a certain key to a value in an unit with the ComputerGui extension. Unit: the unit with the extension. Key: the key for the value. Value: the string value to filter against. Combine the use of this element with custom modules to make your mission adapt to the interface's state.","title":"Elements"},{"location":"elements/#elements","text":"ComputerGui comes packed with two custom elements to use in your mission logic.","title":"Elements"},{"location":"elements/#computersetvalue","text":"Sets the value to a certain key inside an unit's ComputerGui extension. Unit: the unit with the extension. Key: the key for the value. Value: the string value to set the key to. Combine the use of this element with custom modules to make your interface change as the mission progresses.","title":"ComputerSetValue"},{"location":"elements/#computervaluefilter","text":"Filters on-executed element list execution based on the equivalence of a certain key to a value in an unit with the ComputerGui extension. Unit: the unit with the extension. Key: the key for the value. Value: the string value to filter against. Combine the use of this element with custom modules to make your mission adapt to the interface's state.","title":"ComputerValueFilter"},{"location":"events/","text":"Events To make stuff happen as the user interacts with the interface, you will need to set up events. These are added as a table inside the initializer data. See the following configuration snippet: ComputerBitmap:new({ config = {...}, events = { mouse_enter = { type = \"callback\". enabled = true, event = \"clbk_highlight_add\", post_event = { sound_event_id = \"highlight\", clbk = \"clbk_highlight_sound_end\", flags = { \"end_of_event\" } } }, mouse_exit = { type = \"callback\". enabled = true, event = \"clbk_highlight_remove\" }, mouse_pressed = { type = \"func\", enabled = true, event = function(window, ...) log(\"Mouse was pressed down on object: \" .. self:object():name() or \"bitmap object\") end }, mouse_released = { type = \"spawn\", enabled = true, event = ComputerWindow:new(...) } }, mouse_variant = \"link\" }) This would create a bitmap object which is highly reactive to mouse interactions. The mouse_variant value is used to determine what texture rect the mouse texture should have when over the object. Possible values are arrow (default), link , hand and grab ; you can define more at ComputerGui.mouse_variants . Event names are used as the key for a table where you actually define it. See below for details on possible type values and event names. Events are triggered on the ComputerWindow class first by the unit extension. The ComputerWindow class will then automatically pass the event to child objects. Events may have certain trigger filters; for more information on these, check out the table below or ComputerWindow:trigger_event() . You can make your own events by simply adding their name to the configuration and calling them by using the aforementioned method on the corresponding window; say, when a timer finishes, a video plays, etc . Event list Event Triggered on Arguments open Opening the application by clicking on its desktop icon - close Closing the application by clicking on its close button - attention Trying to open the application while already opened by clicking on its desktop icon (doing this will also trigger gained_focus if its trigger conditions apply) - mouse_enter Moving the mouse cursor inside an object while visible mouse_x, mouse_y mouse_exit Moving the mouse cursor outside an object or over another object over the initial one, having previously placed the cursor inside the latter mouse_x, mouse_y mouse_pressed Pressing down the mouse cursor's left button inside an object while visible button, mouse_x, mouse_y mouse_released Releasing the mouse cursor's left button inside an object while visible, having previously placed the cursor inside the object while visible button, mouse_x, mouse_y gained_focus Clicking inside of the application window while being unfocused - lost_focus Clicking outside of the application window while being focused - Event types func : run a function as if it were a method of the current object ( self is available for use) callback : use a callback to the specified method on the object's class spawn : spawn a new ComputerWindow defined through the specified configuration. The new window will lock the parent window until it is closed and its parent will be set to the parent window. A child window can spawn more child windows from itself; the base application window will pass events through all the windows, in order, until the last spawned child window is reached. Playing sounds To play sounds on events, add a post_event table with the event ID you want to play (the corresponding soundbank should be loaded if it is a vanilla sound; disregard for custom sounds, more info on event IDs here ). post_event = { sound_event_id = \"highlight\", clbk = \"clbk_highlight_sound_end\", flags = { \"end_of_event\" } } sound_event_id : The event ID. clbk : An optional callback function. flags : A table of \"flags\" that will run the callback function. These are defined in-engine and are: end_of_event marker duration Diesel will call your callback function with the following arguments: callback_func(instance, sound_source, event_type, cookie, label, identifier, position) For further reference, see the PAYDAY 2 LuaJit repository , particularly, VoiceBriefingManager:_sound_callback() .","title":"Events"},{"location":"events/#events","text":"To make stuff happen as the user interacts with the interface, you will need to set up events. These are added as a table inside the initializer data. See the following configuration snippet: ComputerBitmap:new({ config = {...}, events = { mouse_enter = { type = \"callback\". enabled = true, event = \"clbk_highlight_add\", post_event = { sound_event_id = \"highlight\", clbk = \"clbk_highlight_sound_end\", flags = { \"end_of_event\" } } }, mouse_exit = { type = \"callback\". enabled = true, event = \"clbk_highlight_remove\" }, mouse_pressed = { type = \"func\", enabled = true, event = function(window, ...) log(\"Mouse was pressed down on object: \" .. self:object():name() or \"bitmap object\") end }, mouse_released = { type = \"spawn\", enabled = true, event = ComputerWindow:new(...) } }, mouse_variant = \"link\" }) This would create a bitmap object which is highly reactive to mouse interactions. The mouse_variant value is used to determine what texture rect the mouse texture should have when over the object. Possible values are arrow (default), link , hand and grab ; you can define more at ComputerGui.mouse_variants . Event names are used as the key for a table where you actually define it. See below for details on possible type values and event names. Events are triggered on the ComputerWindow class first by the unit extension. The ComputerWindow class will then automatically pass the event to child objects. Events may have certain trigger filters; for more information on these, check out the table below or ComputerWindow:trigger_event() . You can make your own events by simply adding their name to the configuration and calling them by using the aforementioned method on the corresponding window; say, when a timer finishes, a video plays, etc .","title":"Events"},{"location":"events/#event-list","text":"Event Triggered on Arguments open Opening the application by clicking on its desktop icon - close Closing the application by clicking on its close button - attention Trying to open the application while already opened by clicking on its desktop icon (doing this will also trigger gained_focus if its trigger conditions apply) - mouse_enter Moving the mouse cursor inside an object while visible mouse_x, mouse_y mouse_exit Moving the mouse cursor outside an object or over another object over the initial one, having previously placed the cursor inside the latter mouse_x, mouse_y mouse_pressed Pressing down the mouse cursor's left button inside an object while visible button, mouse_x, mouse_y mouse_released Releasing the mouse cursor's left button inside an object while visible, having previously placed the cursor inside the object while visible button, mouse_x, mouse_y gained_focus Clicking inside of the application window while being unfocused - lost_focus Clicking outside of the application window while being focused -","title":"Event list"},{"location":"events/#event-types","text":"func : run a function as if it were a method of the current object ( self is available for use) callback : use a callback to the specified method on the object's class spawn : spawn a new ComputerWindow defined through the specified configuration. The new window will lock the parent window until it is closed and its parent will be set to the parent window. A child window can spawn more child windows from itself; the base application window will pass events through all the windows, in order, until the last spawned child window is reached.","title":"Event types"},{"location":"events/#playing-sounds","text":"To play sounds on events, add a post_event table with the event ID you want to play (the corresponding soundbank should be loaded if it is a vanilla sound; disregard for custom sounds, more info on event IDs here ). post_event = { sound_event_id = \"highlight\", clbk = \"clbk_highlight_sound_end\", flags = { \"end_of_event\" } } sound_event_id : The event ID. clbk : An optional callback function. flags : A table of \"flags\" that will run the callback function. These are defined in-engine and are: end_of_event marker duration Diesel will call your callback function with the following arguments: callback_func(instance, sound_source, event_type, cookie, label, identifier, position) For further reference, see the PAYDAY 2 LuaJit repository , particularly, VoiceBriefingManager:_sound_callback() .","title":"Playing sounds"},{"location":"modules/making/","text":"Making modules Any given module needs to be based on ComputerObjectBase and must contain the following methods: Required methods init(tweak_data, subclass) This method must call the superclass method of the same name . You can add any tweak data keys you may need to your custom module. Say, a timer length, or the color for a certain bitmap at a certain event trigger. You must still respect the base class' tweak data requirements. create(parent_object, extension, parent) This method must call the superclass method of the same name. ** This method must define self._object as a Diesel interface object. This means a panel, a bitmap, a rect, a text, a gradient, a polyline, a video, etc . See engine classes for reference. You can go however crazy you wanna go here. Do not add children modules inside your custom module; modules can only be parented to ComputerWindow objects. Optional methods update(t, dt) For frame-based updating as long as the computer extension is active. Actually making cool stuff Use the extension's base events as triggers for mouse clicks, hovers, window opening, etc . From there, you can trigger any extra interface event you want to add. Making the interface adapt to mission events To set the state of the interface with mission logic, see the custom elements . Making the mission respond to interface events Interact with your mission logic by calling GlobalEvents with managers.mission:call_global_event() . Then, use GlobalEventTrigger elements to respond to these events.","title":"Making your own modules"},{"location":"modules/making/#making-modules","text":"Any given module needs to be based on ComputerObjectBase and must contain the following methods:","title":"Making modules"},{"location":"modules/making/#required-methods","text":"","title":"Required methods"},{"location":"modules/making/#inittweak_data-subclass","text":"This method must call the superclass method of the same name . You can add any tweak data keys you may need to your custom module. Say, a timer length, or the color for a certain bitmap at a certain event trigger. You must still respect the base class' tweak data requirements.","title":"init(tweak_data, subclass)"},{"location":"modules/making/#createparent_object-extension-parent","text":"This method must call the superclass method of the same name. ** This method must define self._object as a Diesel interface object. This means a panel, a bitmap, a rect, a text, a gradient, a polyline, a video, etc . See engine classes for reference. You can go however crazy you wanna go here. Do not add children modules inside your custom module; modules can only be parented to ComputerWindow objects.","title":"create(parent_object, extension, parent)"},{"location":"modules/making/#optional-methods","text":"","title":"Optional methods"},{"location":"modules/making/#updatet-dt","text":"For frame-based updating as long as the computer extension is active.","title":"update(t, dt)"},{"location":"modules/making/#actually-making-cool-stuff","text":"Use the extension's base events as triggers for mouse clicks, hovers, window opening, etc . From there, you can trigger any extra interface event you want to add.","title":"Actually making cool stuff"},{"location":"modules/making/#making-the-interface-adapt-to-mission-events","text":"To set the state of the interface with mission logic, see the custom elements .","title":"Making the interface adapt to mission events"},{"location":"modules/making/#making-the-mission-respond-to-interface-events","text":"Interact with your mission logic by calling GlobalEvents with managers.mission:call_global_event() . Then, use GlobalEventTrigger elements to respond to these events.","title":"Making the mission respond to interface events"},{"location":"modules/classes/ComputerObjectBase/","text":"ComputerObjectBase Shared base class that any object module requires in order to function. Overriding methods from this class is possible as with any other PAYDAY 2 class; use {Module name}.super.{ComputerObjectBase method}(self, ...) to refer back to this class. Tweak data values { config = {}, events = {} } config : A table containing the values that will be passed to Diesel to create interface objects. A malformed configuration table will crash the game with an access violation . You can use computed properties here to inherit config values from parent objects (see below). to be contained in ComputerWindow instances. events : The events table. See Events . ComputerWindow instances have some more entries in addition to the previous values. See their tweak data configuration guide . Methods ComputerObjectBase:create() Adds a reference to its parent and the extension instance, then computes config properties with self:compute_properties() . Modules need to refer to this method when running their create() method before doing any additional creation. ComputerObjectBase:post_create() Sets up the events after all the objects are created for proper callbacks. ComputerObjectBase:setup_events() Sets up possible events of type callback (implemented) or spawn (not implemented) . ComputerObjectBase:compute_properties() Runs function-type properties inside config by passing self as the first argument and sets those properties to the functions' return values. This can be useful to inherit parent object values. An example of a computed property would be: w = function(self) return self._parent._tweak_data.config.w - 35 end ComputerObjectBase:trigger_event(event_name, ...) Triggers the corresponding event on itself and passes any extra arguments to the corresponding handler. ComputerObjectBase:is_visible(x, y) Returns whether the object is visible at position (x, y) or not, that is, it is not obscured by windows and it itself is visible (through Object:visible() ). ComputerObjectBase:mouse_variant() Returns the provided mouse_variant . ComputerObjectBase:object() Returns the Diesel object. ComputerObjectBase:children() Returns the instance's children instances. Values self._parent Returns the parent ComputerWindow .","title":"ComputerObjectBase"},{"location":"modules/classes/ComputerObjectBase/#computerobjectbase","text":"Shared base class that any object module requires in order to function. Overriding methods from this class is possible as with any other PAYDAY 2 class; use {Module name}.super.{ComputerObjectBase method}(self, ...) to refer back to this class.","title":"ComputerObjectBase"},{"location":"modules/classes/ComputerObjectBase/#tweak-data-values","text":"{ config = {}, events = {} } config : A table containing the values that will be passed to Diesel to create interface objects. A malformed configuration table will crash the game with an access violation . You can use computed properties here to inherit config values from parent objects (see below). to be contained in ComputerWindow instances. events : The events table. See Events . ComputerWindow instances have some more entries in addition to the previous values. See their tweak data configuration guide .","title":"Tweak data values"},{"location":"modules/classes/ComputerObjectBase/#methods","text":"","title":"Methods"},{"location":"modules/classes/ComputerObjectBase/#computerobjectbasecreate","text":"Adds a reference to its parent and the extension instance, then computes config properties with self:compute_properties() . Modules need to refer to this method when running their create() method before doing any additional creation.","title":"ComputerObjectBase:create()"},{"location":"modules/classes/ComputerObjectBase/#computerobjectbasepost_create","text":"Sets up the events after all the objects are created for proper callbacks.","title":"ComputerObjectBase:post_create()"},{"location":"modules/classes/ComputerObjectBase/#computerobjectbasesetup_events","text":"Sets up possible events of type callback (implemented) or spawn (not implemented) .","title":"ComputerObjectBase:setup_events()"},{"location":"modules/classes/ComputerObjectBase/#computerobjectbasecompute_properties","text":"Runs function-type properties inside config by passing self as the first argument and sets those properties to the functions' return values. This can be useful to inherit parent object values. An example of a computed property would be: w = function(self) return self._parent._tweak_data.config.w - 35 end","title":"ComputerObjectBase:compute_properties()"},{"location":"modules/classes/ComputerObjectBase/#computerobjectbasetrigger_eventevent_name","text":"Triggers the corresponding event on itself and passes any extra arguments to the corresponding handler.","title":"ComputerObjectBase:trigger_event(event_name, ...)"},{"location":"modules/classes/ComputerObjectBase/#computerobjectbaseis_visiblex-y","text":"Returns whether the object is visible at position (x, y) or not, that is, it is not obscured by windows and it itself is visible (through Object:visible() ).","title":"ComputerObjectBase:is_visible(x, y)"},{"location":"modules/classes/ComputerObjectBase/#computerobjectbasemouse_variant","text":"Returns the provided mouse_variant .","title":"ComputerObjectBase:mouse_variant()"},{"location":"modules/classes/ComputerObjectBase/#computerobjectbaseobject","text":"Returns the Diesel object.","title":"ComputerObjectBase:object()"},{"location":"modules/classes/ComputerObjectBase/#computerobjectbasechildren","text":"Returns the instance's children instances.","title":"ComputerObjectBase:children()"},{"location":"modules/classes/ComputerObjectBase/#values","text":"","title":"Values"},{"location":"modules/classes/ComputerObjectBase/#self_parent","text":"Returns the parent ComputerWindow .","title":"self._parent"},{"location":"modules/classes/ComputerWindow/","text":"ComputerWindow This module inherits from ComputerObjectBase . A panel created as a child of another panel which can be parent to any type of object. Tweak data values { children = {}, background_color = Color() } children : A table containing module instances (created by running their new(tweak_data) method and providing a tweak table, see ComputerObjectBase ). background_color : The background color for the window. Setup ComputerWindow:init(tweak_data) Inserts a ComputerRect drag_hitbox and a ComputerBitmap close_button object to self._tweak_data.children . Also adds three events to the window: open , close and attention . For information on setting up the tweak data, see ComputerObjectBase . ComputerWindow:create(parent) Creates a Panel instance as a child of parent through the Panel:panel(config) Diesel method and passes self._tweak_data.config as the first argument. Afterwards, a modified HUDBGBox is created as the base for the contents and then the create() method is called on every child object, with their parent being the window panel. Events ComputerWindow:trigger_event(event_name, ...) Triggers the corresponding event on both itself and appropiate children following set filters. For more information, see Events . ComputerWindow:update(t, dt) Updates every frame and calls every child's update() method too. Values ComputerWindow:get_value(key) Returns the requested key's value. ComputerWindow:set_value(key, value) Sets a key to a certain value, then returns it. Other ComputerWindow:is_active_window() Returns whether the current window object stack's top object is the instance's own object or not. If the window were a child of another, it would compare the currently active window to its parent. ComputerWindow:is_visible(x, y) Returns whether the window is visible at position (x, y) or not, that is, it is not obscured by other windows. ComputerWindow:mouse_variant(x, y) Returns the mouse variant specified for an object that contains position (x, y) . Defaults to \"arrow\". ComputerWindow:is_open() Returns whether the window is open or not. Note on layers You are free to use layers in your windows however you like. ComputerGui will automatically calculate the layers you are using in a particular window and take those into account when managing multiple windows at once to avoid clipping.","title":"ComputerWindow"},{"location":"modules/classes/ComputerWindow/#computerwindow","text":"This module inherits from ComputerObjectBase . A panel created as a child of another panel which can be parent to any type of object.","title":"ComputerWindow"},{"location":"modules/classes/ComputerWindow/#tweak-data-values","text":"{ children = {}, background_color = Color() } children : A table containing module instances (created by running their new(tweak_data) method and providing a tweak table, see ComputerObjectBase ). background_color : The background color for the window.","title":"Tweak data values"},{"location":"modules/classes/ComputerWindow/#setup","text":"","title":"Setup"},{"location":"modules/classes/ComputerWindow/#computerwindowinittweak_data","text":"Inserts a ComputerRect drag_hitbox and a ComputerBitmap close_button object to self._tweak_data.children . Also adds three events to the window: open , close and attention . For information on setting up the tweak data, see ComputerObjectBase .","title":"ComputerWindow:init(tweak_data)"},{"location":"modules/classes/ComputerWindow/#computerwindowcreateparent","text":"Creates a Panel instance as a child of parent through the Panel:panel(config) Diesel method and passes self._tweak_data.config as the first argument. Afterwards, a modified HUDBGBox is created as the base for the contents and then the create() method is called on every child object, with their parent being the window panel.","title":"ComputerWindow:create(parent)"},{"location":"modules/classes/ComputerWindow/#events","text":"","title":"Events"},{"location":"modules/classes/ComputerWindow/#computerwindowtrigger_eventevent_name","text":"Triggers the corresponding event on both itself and appropiate children following set filters. For more information, see Events .","title":"ComputerWindow:trigger_event(event_name, ...)"},{"location":"modules/classes/ComputerWindow/#computerwindowupdatet-dt","text":"Updates every frame and calls every child's update() method too.","title":"ComputerWindow:update(t, dt)"},{"location":"modules/classes/ComputerWindow/#values","text":"","title":"Values"},{"location":"modules/classes/ComputerWindow/#computerwindowget_valuekey","text":"Returns the requested key's value.","title":"ComputerWindow:get_value(key)"},{"location":"modules/classes/ComputerWindow/#computerwindowset_valuekey-value","text":"Sets a key to a certain value, then returns it.","title":"ComputerWindow:set_value(key, value)"},{"location":"modules/classes/ComputerWindow/#other","text":"","title":"Other"},{"location":"modules/classes/ComputerWindow/#computerwindowis_active_window","text":"Returns whether the current window object stack's top object is the instance's own object or not. If the window were a child of another, it would compare the currently active window to its parent.","title":"ComputerWindow:is_active_window()"},{"location":"modules/classes/ComputerWindow/#computerwindowis_visiblex-y","text":"Returns whether the window is visible at position (x, y) or not, that is, it is not obscured by other windows.","title":"ComputerWindow:is_visible(x, y)"},{"location":"modules/classes/ComputerWindow/#computerwindowmouse_variantx-y","text":"Returns the mouse variant specified for an object that contains position (x, y) . Defaults to \"arrow\".","title":"ComputerWindow:mouse_variant(x, y)"},{"location":"modules/classes/ComputerWindow/#computerwindowis_open","text":"Returns whether the window is open or not.","title":"ComputerWindow:is_open()"},{"location":"modules/classes/ComputerWindow/#note-on-layers","text":"You are free to use layers in your windows however you like. ComputerGui will automatically calculate the layers you are using in a particular window and take those into account when managing multiple windows at once to avoid clipping.","title":"Note on layers"}]}